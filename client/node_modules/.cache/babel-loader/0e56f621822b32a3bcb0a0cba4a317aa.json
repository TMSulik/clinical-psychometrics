{"ast":null,"code":"// export const tallyScaleItem = (item, traits) => {\n//   let result = 0;\n//   for(let i = 0; i < traits.length; i++) {\n//     if(item.indicative.includes(traits[i])) {\n//       result++;  \n//     } \n//     if(item.contraindicative.includes(traits[i])) {\n//       result--;  \n//     }\n//   }\n//   return result + item.contraindicative.length / item.contraindicative.length + item.indicative.length; \n// }\nexport const tallyScaleItem = item => {\n  // Get the personal traits the user has checked\n  const traits = this.state.personalTraits;\n  const indic = traits.filter(value => item.indicative.includes(value)).length;\n  const contra = traits.filter(value => item.contraindicative.includes(value)).length; // Get the maximum absolute number of relevant traits\n\n  const pos = item.indicative.length;\n  const neg = item.contraindicative.length;\n  let result = neg; // If no relevant traits are checked, default to 50% (equivocal)\n\n  if (indic + contra === 0) {\n    return (neg + pos) / 2;\n  } // Otherwise, return the proportion of indicative to contraindicative\n\n\n  return result - contra + indic;\n};","map":{"version":3,"sources":["/Users/TMSulik/Dropbox/UW/clinical-psychometrics/client/src/services/ProcessScale.js"],"names":["tallyScaleItem","item","traits","state","personalTraits","indic","filter","value","indicative","includes","length","contra","contraindicative","pos","neg","result"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,cAAc,GAAIC,IAAD,IAAU;AACtC;AACA,QAAMC,MAAM,GAAG,KAAKC,KAAL,CAAWC,cAA1B;AACA,QAAMC,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcC,KAAK,IAAIN,IAAI,CAACO,UAAL,CAAgBC,QAAhB,CAAyBF,KAAzB,CAAvB,EAAwDG,MAAtE;AACA,QAAMC,MAAM,GAAGT,MAAM,CAACI,MAAP,CAAcC,KAAK,IAAIN,IAAI,CAACW,gBAAL,CAAsBH,QAAtB,CAA+BF,KAA/B,CAAvB,EAA8DG,MAA7E,CAJsC,CAKtC;;AACA,QAAMG,GAAG,GAAGZ,IAAI,CAACO,UAAL,CAAgBE,MAA5B;AACA,QAAMI,GAAG,GAAGb,IAAI,CAACW,gBAAL,CAAsBF,MAAlC;AACA,MAAIK,MAAM,GAAGD,GAAb,CARsC,CAStC;;AACA,MAAGT,KAAK,GAAGM,MAAR,KAAmB,CAAtB,EAAyB;AACvB,WAAO,CAACG,GAAG,GAAGD,GAAP,IAAc,CAArB;AACD,GAZqC,CAatC;;;AACA,SAAOE,MAAM,GAAGJ,MAAT,GAAkBN,KAAzB;AACD,CAfM","sourcesContent":["// export const tallyScaleItem = (item, traits) => {\n//   let result = 0;\n//   for(let i = 0; i < traits.length; i++) {\n//     if(item.indicative.includes(traits[i])) {\n//       result++;  \n//     } \n//     if(item.contraindicative.includes(traits[i])) {\n//       result--;  \n//     }\n//   }\n//   return result + item.contraindicative.length / item.contraindicative.length + item.indicative.length; \n// }\n\nexport const tallyScaleItem = (item) => {\n  // Get the personal traits the user has checked\n  const traits = this.state.personalTraits;\n  const indic = traits.filter(value => item.indicative.includes(value)).length;\n  const contra = traits.filter(value => item.contraindicative.includes(value)).length;\n  // Get the maximum absolute number of relevant traits\n  const pos = item.indicative.length;\n  const neg = item.contraindicative.length;\n  let result = neg;\n  // If no relevant traits are checked, default to 50% (equivocal)\n  if(indic + contra === 0) {\n    return (neg + pos) / 2;\n  }\n  // Otherwise, return the proportion of indicative to contraindicative\n  return result - contra + indic;\n}\n\n"]},"metadata":{},"sourceType":"module"}