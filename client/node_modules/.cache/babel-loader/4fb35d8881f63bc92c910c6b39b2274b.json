{"ast":null,"code":"var _jsxFileName = \"/Users/TMSulik/Dropbox/UW/clinical-psychometrics/client/src/components/Profiles.js\";\nimport React from \"react\";\nimport '../App.css';\nimport { needScale } from '../services/Scales'; // import { tallyScaleItem } from '../services/ProcessScale';\n\nclass Profiles extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      needScale: [],\n      personalTraits: this.props.traits,\n      percent: 1.0\n    };\n\n    this.tallyScaleItem = item => {\n      let result = 0;\n      const traits = this.state.personalTraits;\n\n      for (let i = 0; i < traits.length; i++) {\n        if (item.indicative.includes(traits[i])) {\n          result++;\n        }\n\n        if (item.contraindicative.includes(traits[i])) {\n          result--;\n        }\n      }\n\n      return result + item.contraindicative.length;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      needScale: needScale\n    });\n    console.log(\"TRAITS in Profiles: \", this.state.personalTraits);\n  }\n\n  renderLines() {\n    const Line = ({\n      left\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"line\",\n        style: {\n          left: \"\".concat(left, \"%\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      });\n    };\n\n    return Array(10).fill(null).map((el, i) => React.createElement(Line, {\n      left: i * 10,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }));\n  }\n\n  renderBars() {\n    const Bar = ({\n      percent\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"bar\",\n        style: {\n          width: \"\".concat(percent, \"%\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }; // const { needScale } = this.props\n\n\n    const needScale = this.state.needScale;\n    return needScale.map(trait => {\n      const denominator = trait.indicative.length + trait.contraindicative.length;\n      let percent = this.tallyScaleItem(trait) / denominator * 100;\n\n      if (this.tallyScaleItem(trait) === 0) {\n        percent = 50;\n      }\n\n      return React.createElement(Bar, {\n        percent: percent,\n        key: trait.trait,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    });\n  }\n\n  renderBarText() {\n    const needScale = this.state.needScale;\n    return React.createElement(\"div\", {\n      className: \"bar-text-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, needScale.map(trait => React.createElement(\"div\", {\n      className: \"text\",\n      key: trait.trait,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, trait.trait)));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Personality Profiles\"), React.createElement(\"div\", {\n      className: \"graph-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"graph-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Need Scale\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Assessment of psychological wants or needs\"), React.createElement(\"div\", {\n      className: \"graph\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.renderBarText(), React.createElement(\"div\", {\n      className: \"bar-lines-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.renderLines(), this.renderBars()))));\n  }\n\n}\n\nexport default Profiles;","map":{"version":3,"sources":["/Users/TMSulik/Dropbox/UW/clinical-psychometrics/client/src/components/Profiles.js"],"names":["React","needScale","Profiles","Component","state","personalTraits","props","traits","percent","tallyScaleItem","item","result","i","length","indicative","includes","contraindicative","componentDidMount","setState","console","log","renderLines","Line","left","Array","fill","map","el","renderBars","Bar","width","trait","denominator","renderBarText","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport '../App.css';\nimport { needScale } from '../services/Scales';\n// import { tallyScaleItem } from '../services/ProcessScale';\n\nclass Profiles extends React.Component {\n\n  state = { \n    needScale: [],\n    personalTraits: this.props.traits,\n    percent: 1.0,\n    \n  };\n\n  componentDidMount() {\n    this.setState({ needScale: needScale });\n    console.log(\"TRAITS in Profiles: \", this.state.personalTraits);\n  }\n\n  tallyScaleItem = (item) => {\n    let result = 0;\n    const traits = this.state.personalTraits;\n    for(let i = 0; i < traits.length; i++) {\n      if(item.indicative.includes(traits[i])) {\n        result++;  \n      } \n      if(item.contraindicative.includes(traits[i])) {\n        result--;  \n      }\n    }\n    return result + item.contraindicative.length; \n  }\n\n  renderLines() {\n    const Line = ({left}) => {\n      return (\n        <div \n          className=\"line\"\n          style={{left: `${left}%`}}\n        />\n      )\n    }\n    return Array(10).fill(null).map((el, i) => (\n      <Line \n        left={i * 10}\n        key={i}\n      />\n    ))\n  }\n\n  renderBars() {\n    const Bar = ({percent}) => {\n      return (\n        <div className=\"bar\" style={{width: `${percent}%`}}/>\n      )\n    }\n    // const { needScale } = this.props\n    const needScale = this.state.needScale; \n \n    return needScale.map(trait => {\n      const denominator = trait.indicative.length + trait.contraindicative.length;\n      let percent = (this.tallyScaleItem(trait) / denominator ) * 100;\n      if(this.tallyScaleItem(trait) === 0) {\n        percent = 50;\n      }\n      return (\n        <Bar\n          percent={percent}\n          key={trait.trait}\n        />\n      )\n    });\n  }\n\n  renderBarText() {\n    const needScale = this.state.needScale;\n    return (\n      <div className=\"bar-text-content\">\n        {\n          needScale.map((trait) => (\n            <div className=\"text\" key={trait.trait}>\n              {trait.trait}\n            </div>\n          ))\n        }\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Personality Profiles</h1>\n        <div className=\"graph-wrapper\"> \n        <h2 className=\"graph-header\">Need Scale</h2>\n        <p>Assessment of psychological wants or needs</p>         \n          <div className=\"graph\">\n            {this.renderBarText()}\n            <div className=\"bar-lines-container\"> \n              {this.renderLines()}\n              {this.renderBars()}\n            </div> \n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Profiles;"]},"metadata":{},"sourceType":"module"}