{"ast":null,"code":"export const tallyScaleItem = (item, traits) => {\n  let result = 0;\n\n  for (let i = 0; i < traits.length; i++) {\n    if (item.indicative.includes(traits[i])) {\n      result++;\n    }\n\n    if (item.contraindicative.includes(traits[i])) {\n      result--;\n    }\n  }\n\n  return result + item.contraindicative.length / item.contraindicative.length + item.indicative.length;\n};\n\ntallyScaleItem = item => {\n  // Get the personal traits the user has checked\n  const traits = this.state.personalTraits;\n  const indic = traits.filter(value => item.indicative.includes(value)).length;\n  const contra = traits.filter(value => item.contraindicative.includes(value)).length; // Get the maximum absolute number of relevant traits\n\n  const pos = item.indicative.length;\n  const neg = item.contraindicative.length;\n  let result = neg; // If no relevant traits are checked, default to 50% (equivocal)\n\n  if (indic + contra === 0) {\n    return (neg + pos) / 2;\n  } // Otherwise, return the proportion of indicative to contraindicative\n\n\n  return result - contra + indic;\n};","map":{"version":3,"sources":["/Users/TMSulik/Dropbox/UW/clinical-psychometrics/client/src/services/ProcessScale.js"],"names":["tallyScaleItem","item","traits","result","i","length","indicative","includes","contraindicative","state","personalTraits","indic","filter","value","contra","pos","neg"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC9C,MAAIC,MAAM,GAAG,CAAb;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAGH,IAAI,CAACK,UAAL,CAAgBC,QAAhB,CAAyBL,MAAM,CAACE,CAAD,CAA/B,CAAH,EAAwC;AACtCD,MAAAA,MAAM;AACP;;AACD,QAAGF,IAAI,CAACO,gBAAL,CAAsBD,QAAtB,CAA+BL,MAAM,CAACE,CAAD,CAArC,CAAH,EAA8C;AAC5CD,MAAAA,MAAM;AACP;AACF;;AACD,SAAOA,MAAM,GAAGF,IAAI,CAACO,gBAAL,CAAsBH,MAAtB,GAA+BJ,IAAI,CAACO,gBAAL,CAAsBH,MAA9D,GAAuEJ,IAAI,CAACK,UAAL,CAAgBD,MAA9F;AACD,CAXM;;AAaPL,cAAc,GAAIC,IAAD,IAAU;AACzB;AACA,QAAMC,MAAM,GAAG,KAAKO,KAAL,CAAWC,cAA1B;AACA,QAAMC,KAAK,GAAGT,MAAM,CAACU,MAAP,CAAcC,KAAK,IAAIZ,IAAI,CAACK,UAAL,CAAgBC,QAAhB,CAAyBM,KAAzB,CAAvB,EAAwDR,MAAtE;AACA,QAAMS,MAAM,GAAGZ,MAAM,CAACU,MAAP,CAAcC,KAAK,IAAIZ,IAAI,CAACO,gBAAL,CAAsBD,QAAtB,CAA+BM,KAA/B,CAAvB,EAA8DR,MAA7E,CAJyB,CAKzB;;AACA,QAAMU,GAAG,GAAGd,IAAI,CAACK,UAAL,CAAgBD,MAA5B;AACA,QAAMW,GAAG,GAAGf,IAAI,CAACO,gBAAL,CAAsBH,MAAlC;AACA,MAAIF,MAAM,GAAGa,GAAb,CARyB,CASzB;;AACA,MAAGL,KAAK,GAAGG,MAAR,KAAmB,CAAtB,EAAyB;AACvB,WAAO,CAACE,GAAG,GAAGD,GAAP,IAAc,CAArB;AACD,GAZwB,CAazB;;;AACA,SAAOZ,MAAM,GAAGW,MAAT,GAAkBH,KAAzB;AACD,CAfD","sourcesContent":["export const tallyScaleItem = (item, traits) => {\n  let result = 0;\n  for(let i = 0; i < traits.length; i++) {\n    if(item.indicative.includes(traits[i])) {\n      result++;  \n    } \n    if(item.contraindicative.includes(traits[i])) {\n      result--;  \n    }\n  }\n  return result + item.contraindicative.length / item.contraindicative.length + item.indicative.length; \n}\n\ntallyScaleItem = (item) => {\n  // Get the personal traits the user has checked\n  const traits = this.state.personalTraits;\n  const indic = traits.filter(value => item.indicative.includes(value)).length;\n  const contra = traits.filter(value => item.contraindicative.includes(value)).length;\n  // Get the maximum absolute number of relevant traits\n  const pos = item.indicative.length;\n  const neg = item.contraindicative.length;\n  let result = neg;\n  // If no relevant traits are checked, default to 50% (equivocal)\n  if(indic + contra === 0) {\n    return (neg + pos) / 2;\n  }\n  // Otherwise, return the proportion of indicative to contraindicative\n  return result - contra + indic;\n}\n\n"]},"metadata":{},"sourceType":"module"}