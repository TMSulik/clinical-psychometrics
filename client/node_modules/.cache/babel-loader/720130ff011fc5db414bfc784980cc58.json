{"ast":null,"code":"var _jsxFileName = \"/Users/TMSulik/Dropbox/UW/clinical-psychometrics/client/src/components/Profiles.js\";\nimport React from \"react\";\nimport '../App.css';\nimport { modusOperandi, needScale, topicalScales, egogram, origenceIntellectance } from '../services/Scales'; // import { tallyScaleItem } from '../services/ProcessScale';\n\nimport styles from '../Graphs.css';\n\nclass Profiles extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modusOperandi: [],\n      needScale: [],\n      topicalScales: [],\n      egogram: [],\n      origenceIntellectance: [],\n      personalTraits: this.props.traits,\n      percent: 1.0,\n      past: this.props.past // numerator: 0\n\n    };\n\n    this.tallyScaleItem = item => {\n      // Get the personal traits the user has checked\n      const traits = this.state.personalTraits;\n      const indic = traits.filter(value => item.indicative.includes(value)).length;\n      const contra = traits.filter(value => item.contraindicative.includes(value)).length; // Get the maximum absolute number of relevant traits\n\n      const pos = item.indicative.length;\n      const neg = item.contraindicative.length;\n      let result = neg; // If no relevant traits are checked, default to 50% (equivocal)\n\n      if (indic + contra === 0) {\n        return (neg + pos) / 2;\n      } // Otherwise, return the proportion of indicative to contraindicative\n\n\n      return result - contra + indic;\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      modusOperandi: modusOperandi,\n      needScale: needScale,\n      topicalScales: topicalScales,\n      egogram: egogram,\n      origenceIntellectance: origenceIntellectance\n    });\n    console.log(\"TRAITS in Profiles: \", this.state.personalTraits);\n  }\n\n  renderLines() {\n    const Line = ({\n      left\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"line\",\n        style: {\n          left: \"\".concat(left, \"%\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    };\n\n    return Array(10).fill(null).map((el, i) => React.createElement(Line, {\n      left: i * 10,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n  renderBars(scale) {\n    const Bar = ({\n      percent\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"bar\",\n        style: {\n          width: \"\".concat(percent, \"%\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    };\n\n    return scale.map(trait => {\n      const denominator = trait.indicative.length + trait.contraindicative.length; // this.setState({ numerator: tallyScaleItem(trait, this.state.personalTraits) });\n      // let percent = (this.state.numerator / denominator ) * 100;\n\n      let percent = this.tallyScaleItem(trait) / denominator * 100;\n      return React.createElement(Bar, {\n        percent: percent,\n        key: trait.trait,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      });\n    });\n  }\n\n  renderBarText(scale) {\n    return React.createElement(\"div\", {\n      className: \"bar-text-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, scale.map(trait => // <div className=\"text\" key={trait.trait}>\n    React.createElement(\"div\", {\n      className: styles.welsh,\n      key: trait.trait,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, trait.trait)));\n  }\n\n  renderGraph(scale) {\n    const name = \"welsh\";\n    return React.createElement(\"div\", {\n      className: \"graph-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"graph-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Need Scale\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Assessment of psychological wants or needs\"), React.createElement(\"div\", {\n      className: \"graph\",\n      id: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.renderBarText(scale), React.createElement(\"div\", {\n      className: \"bar-lines-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, this.renderLines(), this.renderBars(scale))));\n  }\n\n  render() {\n    const needScale = this.state.needScale;\n    const welsh = this.state.origenceIntellectance;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"TAT Responses\"), React.createElement(\"div\", {\n      className: \"graph-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"graph-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Picture 31\"), React.createElement(\"div\", {\n      className: \"graph descriptions text-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"clearfix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: require(\"../images/tat-29.jpg\"),\n      alt: \"apperception\",\n      className: \"inset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Past\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"A demigod was executed in the Holy Land over two millennia ago. He vowed one day to return to usher in the End of Time.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Present\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"He is now reigning down from Heaven in all his glory.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Future\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"He will soon sit at the right hand of the Father to judge the quick and the dead.\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Feelings\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"We are all very afraid: where will YOU spend eternity?\"))))), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Personality Profiles\"), this.renderGraph(welsh));\n  }\n\n}\n\nexport default Profiles;","map":{"version":3,"sources":["/Users/TMSulik/Dropbox/UW/clinical-psychometrics/client/src/components/Profiles.js"],"names":["React","modusOperandi","needScale","topicalScales","egogram","origenceIntellectance","styles","Profiles","Component","state","personalTraits","props","traits","percent","past","tallyScaleItem","item","indic","filter","value","indicative","includes","length","contra","contraindicative","pos","neg","result","componentDidMount","setState","console","log","renderLines","Line","left","Array","fill","map","el","i","renderBars","scale","Bar","width","trait","denominator","renderBarText","welsh","renderGraph","name","render","require"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport '../App.css';\nimport { modusOperandi, needScale, topicalScales, egogram, origenceIntellectance } from '../services/Scales';\n// import { tallyScaleItem } from '../services/ProcessScale';\nimport styles from '../Graphs.css';\nclass Profiles extends React.Component {\n\n  state = { \n    modusOperandi: [],\n    needScale: [],\n    topicalScales: [], \n    egogram: [], \n    origenceIntellectance: [],\n    personalTraits: this.props.traits,\n    percent: 1.0,\n    past: this.props.past\n    // numerator: 0\n  };\n\n  componentDidMount() {\n    this.setState({\n      modusOperandi: modusOperandi, \n      needScale: needScale,\n      topicalScales: topicalScales,\n      egogram: egogram, \n      origenceIntellectance: origenceIntellectance\n    });\n    console.log(\"TRAITS in Profiles: \", this.state.personalTraits);\n  }\n\n  tallyScaleItem = (item) => {\n    // Get the personal traits the user has checked\n    const traits = this.state.personalTraits;\n    const indic = traits.filter(value => item.indicative.includes(value)).length;\n    const contra = traits.filter(value => item.contraindicative.includes(value)).length;\n    // Get the maximum absolute number of relevant traits\n    const pos = item.indicative.length;\n    const neg = item.contraindicative.length;\n    let result = neg;\n    // If no relevant traits are checked, default to 50% (equivocal)\n    if(indic + contra === 0) {\n      return (neg + pos) / 2;\n    }\n    // Otherwise, return the proportion of indicative to contraindicative\n    return result - contra + indic;\n  }\n\n  renderLines() {\n    const Line = ({left}) => {\n      return (\n        <div \n          className=\"line\"\n          style={{left: `${left}%`}}\n        />\n      )\n    }\n    return Array(10).fill(null).map((el, i) => (\n      <Line \n        left={i * 10}\n        key={i}\n      />\n    ))\n  }\n\n  renderBars(scale) {\n    const Bar = ({percent}) => {\n      return (\n        <div className=\"bar\" style={{width: `${percent}%`}}/>\n      )\n    } \n    return scale.map(trait => {\n      const denominator = trait.indicative.length + trait.contraindicative.length;\n      // this.setState({ numerator: tallyScaleItem(trait, this.state.personalTraits) });\n      // let percent = (this.state.numerator / denominator ) * 100;\n      let percent = (this.tallyScaleItem(trait) / denominator ) * 100;\n      return (\n        <Bar\n          percent={percent}\n          key={trait.trait}\n        />\n      )\n    });\n  }\n\n  renderBarText(scale) {\n    return (\n      <div className=\"bar-text-content\">\n        {\n          scale.map((trait) => (\n            // <div className=\"text\" key={trait.trait}>\n            <div className={styles.welsh} key={trait.trait}>\n              {trait.trait}\n            </div>\n          ))\n        }\n      </div>\n    )\n  }\n\n\n\n  renderGraph(scale) {\n    const name = \"welsh\";\n    return (\n      <div className=\"graph-wrapper\"> \n        <h2 className=\"graph-header\">Need Scale</h2>\n        <p>Assessment of psychological wants or needs</p>     \n        <div className=\"graph\" id={name}>\n          {this.renderBarText(scale)}\n          <div className=\"bar-lines-container\"> \n            {this.renderLines()}\n            {this.renderBars(scale)}\n          </div> \n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const needScale = this.state.needScale;\n    const welsh = this.state.origenceIntellectance;\n    return (\n      <div>\n        \n\n        <h1>TAT Responses</h1>\n        <div className=\"graph-wrapper\">\n        <h2 className=\"graph-header\">Picture 31</h2>\n          <div className=\"graph descriptions text-box\">\n\n            <div className=\"clearfix\">\n              \n              <img src={require(`../images/tat-29.jpg`)} alt=\"apperception\" className=\"inset\" />\n              <div >\n                <h3>Past</h3>\n                <p>A demigod was executed in the Holy Land over two millennia ago. He vowed one day to return to usher in the End of Time.</p>\n                <h3>Present</h3>\n                <p>He is now reigning down from Heaven in all his glory.</p>\n                <h3>Future</h3>\n                <p>He will soon sit at the right hand of the Father to judge the quick and the dead.</p>\n                <h3>Feelings</h3>\n                <p>We are all very afraid: where will YOU spend eternity?</p>\n              </div>\n              \n            </div>\n          </div>\n        </div>\n        <h1>Personality Profiles</h1>\n        {this.renderGraph(welsh)}\n      </div>\n    );\n  }\n\n}\n\nexport default Profiles;"]},"metadata":{},"sourceType":"module"}